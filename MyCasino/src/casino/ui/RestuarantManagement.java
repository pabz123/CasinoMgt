/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package casino.ui;

import javax.swing.JOptionPane;
import casino.db.DBConnection;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.pdfbox.pdmodel.font.Standard14Fonts;
/**

/**
 *
 * @author PRECIOUS
 */
public class RestuarantManagement extends javax.swing.JFrame {

    Connection con;
    Statement st;
    String cs;
    String user;
    String password;
    String query;

    // For navigation
    private ResultSet rs = null;

    /**
     * Creates new form HotelManagement
     */
    public RestuarantManagement() {
        con = null;
        st = null;
        cs = "jdbc:mysql://localhost:3306/casino_db";
        user = "root";
        password = "";
        
        initComponents();
        setTitle("Restuarant & Hotel Management");
       
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblRestuarantName = new javax.swing.JLabel();
        lblLocation = new javax.swing.JLabel();
        lblCapacity = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        btnNextRestaurant = new javax.swing.JButton();
        btnExitRestaurant = new javax.swing.JButton();
        txtRestaurantName = new javax.swing.JTextField();
        txtLocation = new javax.swing.JTextField();
        txtCapacity = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        btnAddrestaurant = new javax.swing.JButton();
        btnDeleteRestaurant = new javax.swing.JButton();
        btnPreviousRestaurant = new javax.swing.JButton();
        btnReportRestaurants = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lblRestaurant = new javax.swing.JLabel();
        lblItem = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        txtRestaurantId = new javax.swing.JTextField();
        txtItem = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtCategory = new javax.swing.JTextField();
        btnNextMenu = new javax.swing.JButton();
        btnDeleteMenu = new javax.swing.JButton();
        btnExitMenu = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        BtnReportMenu = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblOrderid = new javax.swing.JLabel();
        lblRestauantName = new javax.swing.JLabel();
        lblAmount = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblQuanity = new javax.swing.JLabel();
        btnNextOrder = new javax.swing.JButton();
        btnClearOrder = new javax.swing.JButton();
        btnExitOrder = new javax.swing.JButton();
        txtOrderId = new javax.swing.JTextField();
        txtRestaurant = new javax.swing.JTextField();
        txtAmount = new javax.swing.JTextField();
        txtStatus = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        btnAddOrder = new javax.swing.JButton();
        btnDeleteOrder = new javax.swing.JButton();
        BtnReportOrders = new javax.swing.JButton();
        btnHome = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-hotel-48.png"))); // NOI18N
        jLabel1.setText("Restaurants");

        lblRestuarantName.setText("Restaurant/Hotel");

        lblLocation.setText("Location");

        lblCapacity.setText("Capacity");

        lblPhone.setText("Phone");

        btnNextRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnNextRestaurant.setText("Next");
        btnNextRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextRestaurantActionPerformed(evt);
            }
        });

        btnExitRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExitRestaurant.setForeground(new java.awt.Color(255, 0, 0));
        btnExitRestaurant.setText("Exit");
        btnExitRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitRestaurantActionPerformed(evt);
            }
        });

        txtLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocationActionPerformed(evt);
            }
        });

        btnAddrestaurant.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAddrestaurant.setText("Add");
        btnAddrestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddrestaurantActionPerformed(evt);
            }
        });

        btnDeleteRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDeleteRestaurant.setText("Delete");
        btnDeleteRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRestaurantActionPerformed(evt);
            }
        });

        btnPreviousRestaurant.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnPreviousRestaurant.setText("Previous");
        btnPreviousRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousRestaurantActionPerformed(evt);
            }
        });

        btnReportRestaurants.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnReportRestaurants.setText("Report");
        btnReportRestaurants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportRestaurantsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReportRestaurants))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblCapacity, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(lblPhone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(75, 75, 75)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCapacity)
                                    .addComponent(txtPhone)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblRestuarantName, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(lblLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(75, 75, 75)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLocation)
                                    .addComponent(txtRestaurantName))))))
                .addGap(40, 40, 40))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnAddrestaurant)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteRestaurant)
                .addGap(33, 33, 33)
                .addComponent(btnNextRestaurant)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(btnPreviousRestaurant)
                .addGap(26, 26, 26)
                .addComponent(btnExitRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnReportRestaurants)))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRestaurantName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRestuarantName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExitRestaurant)
                            .addComponent(btnNextRestaurant)
                            .addComponent(btnAddrestaurant)
                            .addComponent(btnDeleteRestaurant)
                            .addComponent(btnPreviousRestaurant))
                        .addGap(19, 19, 19))))
        );

        jTabbedPane1.addTab("Restuarant/Hotel", jPanel1);

        jLabel3.setFont(new java.awt.Font("Arial Black", 3, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Menu");

        lblRestaurant.setText("Restaurant ");

        lblItem.setText("Item");

        lblPrice.setText("Price");

        lblCategory.setText("Category");

        btnNextMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnNextMenu.setText("Next");
        btnNextMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextMenuActionPerformed(evt);
            }
        });

        btnDeleteMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDeleteMenu.setText("Delete");
        btnDeleteMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMenuActionPerformed(evt);
            }
        });

        btnExitMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExitMenu.setForeground(new java.awt.Color(255, 0, 0));
        btnExitMenu.setText("Exit");
        btnExitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitMenuActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnPrevious.setText("previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        BtnReportMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BtnReportMenu.setText("Report");
        BtnReportMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnReportMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblRestaurant, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(lblItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(btnDeleteMenu)
                        .addGap(30, 30, 30)
                        .addComponent(btnNextMenu)
                        .addGap(7, 7, 7)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnPrevious)
                        .addGap(18, 18, 18)
                        .addComponent(btnExitMenu)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(BtnReportMenu)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtRestaurantId, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtItem, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtCategory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)))
                        .addGap(50, 50, 50))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnReportMenu))
                .addGap(58, 58, 58)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRestaurantId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItem, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCategory)
                    .addComponent(lblCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNextMenu)
                    .addComponent(btnExitMenu)
                    .addComponent(btnAdd)
                    .addComponent(btnDeleteMenu)
                    .addComponent(btnPrevious))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Menu", jPanel3);

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Orders");

        lblOrderid.setText("Order id");

        lblRestauantName.setText("Restaurant");

        lblAmount.setText("Amount");

        lblStatus.setText("Status");

        lblQuanity.setText("Quantity");

        btnNextOrder.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnNextOrder.setText("Next");
        btnNextOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextOrderActionPerformed(evt);
            }
        });

        btnClearOrder.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnClearOrder.setText("Clear");
        btnClearOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearOrderActionPerformed(evt);
            }
        });

        btnExitOrder.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExitOrder.setForeground(new java.awt.Color(255, 0, 0));
        btnExitOrder.setText("Exit");
        btnExitOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitOrderActionPerformed(evt);
            }
        });

        txtAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmountActionPerformed(evt);
            }
        });

        txtStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStatusActionPerformed(evt);
            }
        });

        btnAddOrder.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAddOrder.setText("Add");
        btnAddOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOrderActionPerformed(evt);
            }
        });

        btnDeleteOrder.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDeleteOrder.setText("Delete");
        btnDeleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOrderActionPerformed(evt);
            }
        });

        BtnReportOrders.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BtnReportOrders.setText("Report");
        BtnReportOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnReportOrdersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAddOrder)
                        .addGap(34, 34, 34)
                        .addComponent(btnNextOrder)
                        .addGap(27, 27, 27)
                        .addComponent(btnDeleteOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(btnClearOrder)
                        .addGap(33, 33, 33)
                        .addComponent(btnExitOrder)
                        .addGap(35, 35, 35))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BtnReportOrders))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(lblStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblQuanity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                                    .addComponent(lblOrderid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRestauantName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(94, 94, 94)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtOrderId)
                                    .addComponent(txtAmount, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtRestaurant, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtStatus, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtQuantity))))
                        .addGap(43, 43, 43))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(BtnReportOrders))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderid, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRestauantName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAmount)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuanity))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNextOrder)
                    .addComponent(btnClearOrder)
                    .addComponent(btnExitOrder)
                    .addComponent(btnAddOrder)
                    .addComponent(btnDeleteOrder))
                .addGap(14, 14, 14))
        );

        jTabbedPane1.addTab("Orders", jPanel2);

        btnHome.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnHome.setForeground(new java.awt.Color(0, 204, 0));
        btnHome.setText("Home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnHome)
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHome)
                    .addComponent(btnBack))
                .addGap(4, 4, 4)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLocationActionPerformed

    private void txtStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStatusActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        MainDashboard.MainDashboardMain();
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        CasinoWelcome.main(new String[]{});
    this.dispose();
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnExitRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitRestaurantActionPerformed
       this.dispose();
    }//GEN-LAST:event_btnExitRestaurantActionPerformed

    private void btnAddrestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddrestaurantActionPerformed
        String Restaurant = txtRestaurantName.getText();
        String Location = txtLocation.getText();
        String Capacity = txtCapacity.getText();
        String Phone = txtPhone.getText();
        if(Restaurant.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the hotel");
        txtRestaurantName.requestFocus();
        return;
        }
        if(Location.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the hotel Location");
        txtLocation.requestFocus();
        return;
        }
        if(Capacity.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the hotel capacity");
        txtCapacity.requestFocus();
        return;
        }
        if(Phone.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the hotel contacts");
        txtPhone.requestFocus();
        return;
        }
        try{
            Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection(cs, user, password);
        String sql = "INSERT INTO restaurants(name, location, capacity, phone) VALUES (?, ?, ?, ?)";
        java.sql.PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, Restaurant);
        pst.setString(2, Location);
        pst.setString(3, Capacity);
           pst.setString(4, Phone);
        int rows = pst.executeUpdate();
        if(rows > 0){
        JOptionPane.showMessageDialog(null, "Restaurant entered successfully");
        }else{
        JOptionPane.showMessageDialog(null, "FAILED to enter the restaurant");
        }
        pst.close();
        con.close();
        }catch(SQLException ex){
        JOptionPane.showMessageDialog(this, "SQL Error : " + ex.getMessage());
        }catch(ClassNotFoundException ex){
        Logger.getLogger(RestuarantManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_btnAddrestaurantActionPerformed

    private void btnDeleteRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRestaurantActionPerformed
        String Restaurant = txtRestaurantName.getText();
         if(Restaurant.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the hotel to be deleted");
        txtRestaurantName.requestFocus();
        return;
        }
         int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this Hotel?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) return;
    
    try {
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection(cs, user, password);
        String sql = "DELETE FROM restaurants WHERE name = ?";
        java.sql.PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, Restaurant);
        int rows = pst.executeUpdate();
        if(rows > 0){
            JOptionPane.showMessageDialog(this, "Restaurant deleted successfully!");
        }else{
        JOptionPane.showMessageDialog(null, "FAILED to deleted the restaurant");}
        pst.close();
        con.close();
       }catch (SQLException ex){
        JOptionPane.showMessageDialog(this, "SQL Error :" + ex.getMessage());  
        }catch(ClassNotFoundException ex){
        Logger.getLogger(RestuarantManagement.class.getName()).log(Level.SEVERE,null,ex);       }
                
         
         
    }//GEN-LAST:event_btnDeleteRestaurantActionPerformed

    private void btnNextRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextRestaurantActionPerformed
             try {
            // Open connection and result set if not already open
            if (rs == null) {
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection(cs, user, password);
                st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                query = "SELECT name, location, capacity, phone FROM restaurants ";
                rs = st.executeQuery(query);
            }

            // If first time or after last, move to first
            if (rs.isAfterLast() || rs.isBeforeFirst()) {
                if (!rs.first()) {
                    JOptionPane.showMessageDialog(this, "No records found.");
                    return;
                }
            } else {
                // Move to next, if possible
                if (!rs.next()) {
                    JOptionPane.showMessageDialog(this, "No more records.");
                    rs.afterLast(); // Move cursor after last for next click
                    return;
                }
            }

            // Display current record
            txtRestaurantName.setText(rs.getString("name"));
            txtLocation.setText(rs.getString("location"));
            txtCapacity.setText(rs.getString("capacity"));
            txtPhone.setText(rs.getString("phone"));
            //txtPointsRequired.setText(rs.getString("points_required"));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RestuarantManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
           
    }//GEN-LAST:event_btnNextRestaurantActionPerformed

    private void btnPreviousRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousRestaurantActionPerformed
          try {
            if (rs != null && !rs.isClosed() && rs.previous()) {
             txtRestaurantName.setText(rs.getString("name"));
            txtLocation.setText(rs.getString("location"));
            txtCapacity.setText(rs.getString("capacity"));
            txtPhone.setText(rs.getString("phone"));
            } else {
                JOptionPane.showMessageDialog(this, "No previous record.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    
    }//GEN-LAST:event_btnPreviousRestaurantActionPerformed

    private void btnExitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitMenuActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitMenuActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String RestaurantID = txtRestaurantId.getText();
        String itemName = txtItem.getText();
        String Price = txtPrice.getText();
        String Category = txtCategory.getText();
        
        if(RestaurantID.isEmpty()){
        JOptionPane.showMessageDialog(null, "Enter the restaurant id");
        txtRestaurantId.requestFocus();
        return;
        }
        if(itemName.isEmpty()){
        JOptionPane.showMessageDialog(null, "Enter the item name");
       txtItem.requestFocus();
        return;
        }
        if(Price.isEmpty()){
        JOptionPane.showMessageDialog(null, "Enter the price");
        txtPrice.requestFocus();
        return;
        }
        if(Category.isEmpty()){
        JOptionPane.showMessageDialog(null, "Enter the item category");
        txtCategory.requestFocus();
        return;
        }
         
            double price;
    try {
        price = Double.parseDouble(Price);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Price must be a number!");
        txtPrice.requestFocus();
        return;
    }
        try{
            Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection(cs, user, password);
        String sql = "INSERT INTO menu_items(restaurant_id, item_name, price, category) VALUES (?, ?, ?, ?)";
        java.sql.PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, RestaurantID);
        pst.setString(2, itemName);
        pst.setDouble(3, price);
           pst.setString(4, Category);
        int rows = pst.executeUpdate();
        if(rows > 0){
        JOptionPane.showMessageDialog(null, "Menu item entered successfully");
        }else{
        JOptionPane.showMessageDialog(null, "FAILED to enter the menu item");
        }
        pst.close();
        con.close();
        }catch(SQLException ex){
        JOptionPane.showMessageDialog(this, "SQL Error : " + ex.getMessage());
        }catch(ClassNotFoundException ex){
        Logger.getLogger(RestuarantManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMenuActionPerformed
         String itemName = txtItem.getText();
         if(itemName.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the menu item to be deleted");
        txtItem.requestFocus();
        return;
        }
         int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this Item?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) return;
    
    try {
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection(cs, user, password);
        String sql = "DELETE FROM menu_items WHERE item_name = ?";
        java.sql.PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, itemName);
        int rows = pst.executeUpdate();
        if(rows > 0){
            JOptionPane.showMessageDialog(this, "Menu item deleted successfully!");
        }else{
        JOptionPane.showMessageDialog(null, "FAILED to deleted the menu item");}
        pst.close();
        con.close();
       }catch (SQLException ex){
        JOptionPane.showMessageDialog(this, "SQL Error :" + ex.getMessage());  
        }catch(ClassNotFoundException ex){
        Logger.getLogger(RestuarantManagement.class.getName()).log(Level.SEVERE,null,ex);       }
                
         
    }//GEN-LAST:event_btnDeleteMenuActionPerformed

    private void btnNextMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextMenuActionPerformed
             try {
            // Open connection and result set if not already open
            if (rs == null) {
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection(cs, user, password);
                st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                query = "SELECT restaurant_id, item_name, price, category FROM menu_items ";
                rs = st.executeQuery(query);
            }

            // If first time or after last, move to first
            if (rs.isAfterLast() || rs.isBeforeFirst()) {
                if (!rs.first()) {
                    JOptionPane.showMessageDialog(this, "No records found.");
                    return;
                }
            } else {
                // Move to next, if possible
                if (!rs.next()) {
                    JOptionPane.showMessageDialog(this, "No more records.");
                    rs.afterLast(); // Move cursor after last for next click
                    return;
                }
            }

            // Display current record
            txtRestaurantId.setText(rs.getString("restaurant_id"));
            txtItem.setText(rs.getString("item_name"));
            txtPrice.setText(rs.getString("price"));
            txtCategory.setText(rs.getString("category"));
            //txtPointsRequired.setText(rs.getString("points_required"));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RestuarantManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNextMenuActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
             try {
            if (rs != null && !rs.isClosed() && rs.previous()) {
             txtRestaurantId.setText(rs.getString("restaurant_id"));
            txtItem.setText(rs.getString("item_name"));
            txtPrice.setText(rs.getString("price"));
            txtCategory.setText(rs.getString("category"));
            } else {
                JOptionPane.showMessageDialog(this, "No previous record.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnExitOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitOrderActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitOrderActionPerformed

    private void btnAddOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOrderActionPerformed
       String orderID = txtOrderId.getText();
      // String CustomerID = txtCustomerId.getText();
       String Restaurant = txtRestaurant.getText();
       String Amount = txtAmount.getText();
       String Status = txtStatus.getText();
       String Quantity = txtQuantity.getText();
       
       
       if(orderID.isEmpty()){
       JOptionPane.showMessageDialog(this, "enter the order id");
       txtOrderId.requestFocus();
       return;
       }
      /* if(CustomerID.isEmpty()){
       JOptionPane.showMessageDialog(this, "enter the customer id");
       txtCustomerId.requestFocus();
       return;
       }*/
       if(Restaurant.isEmpty()){
       JOptionPane.showMessageDialog(this, "enter the restaurant");
       txtRestaurant.requestFocus();
       return;
       }
       if(Amount.isEmpty()){
       JOptionPane.showMessageDialog(this, "enter the Amount");
       txtAmount.requestFocus();
       return;
       }
       if(Status.isEmpty()){
       JOptionPane.showMessageDialog(this, "enter the order status");
       txtStatus.requestFocus();
       return;
       }
        if(Quantity.isEmpty()){
       JOptionPane.showMessageDialog(this, "enter the order quantity");
       txtQuantity.requestFocus();
       return;
       }
        double amount;
        try{
         amount = Double.parseDouble(Amount);
        }catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Amount must be a number!");
        txtAmount.requestFocus();
        return;
    }
        if (!Status.equals("Placed") && !Status.equals("Preparing") && !Status.equals("Served")&& !Status.equals("Cancelled")) {
        JOptionPane.showMessageDialog(this, "Outcome must be 'Placed', 'Preparing','Served', or 'Cancelled'!");
        txtStatus.requestFocus();
        return;
    }
         try{
            Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection(cs, user, password);
        String sql = "INSERT INTO orders(order_id, restaurant_id, total_amount, status, quantity) VALUES ( ?, ?, ?, ?, ?)";
        java.sql.PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, orderID);
       // pst.setString(2, CustomerID);
        pst.setString(2, Restaurant);
        pst.setDouble(3, amount);
        pst.setString(4, Status);
        pst.setString(5, Quantity);
        
        int rows = pst.executeUpdate();
        if(rows > 0){
        JOptionPane.showMessageDialog(null, "Order entered successfully");
        }else{
        JOptionPane.showMessageDialog(null, "FAILED to enter the order");
        }
        pst.close();
        con.close();
        }catch(SQLException ex){
        JOptionPane.showMessageDialog(this, "SQL Error : " + ex.getMessage());
        }catch(ClassNotFoundException ex){
        Logger.getLogger(RestuarantManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnAddOrderActionPerformed

    private void btnNextOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextOrderActionPerformed
       try {
            // Open connection and result set if not already open
            if (rs == null) {
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection(cs, user, password);
                st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                query = "SELECT order_id, restaurant_id, total_amount, status, quantity FROM orders ";
                rs = st.executeQuery(query);
            }

            // If first time or after last, move to first
            if (rs.isAfterLast() || rs.isBeforeFirst()) {
                if (!rs.first()) {
                    JOptionPane.showMessageDialog(this, "No records found.");
                    return;
                }
            } else {
                // Move to next, if possible
                if (!rs.next()) {
                    JOptionPane.showMessageDialog(this, "No more records.");
                    rs.afterLast(); // Move cursor after last for next click
                    return;
                }
            }

            // Display current record
            txtOrderId.setText(rs.getString("order_id"));
            //txtCustomerId.setText(rs.getString("customer_id"));
            txtRestaurant.setText(rs.getString("restaurant_id"));
            txtAmount.setText(rs.getString("total_amount"));
            txtStatus.setText(rs.getString("status"));
            txtQuantity.setText(rs.getString("quantity"));
            //txtPointsRequired.setText(rs.getString("points_required"));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RestuarantManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNextOrderActionPerformed

    private void btnDeleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOrderActionPerformed
        String orderID = txtOrderId.getText();
         if(orderID.isEmpty()){
       JOptionPane.showMessageDialog(this, "enter the order id for the order to be deleted");
       txtOrderId.requestFocus();
       return;
       }
    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this Order?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) return;
    
    try {
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection(cs, user, password);
        String sql = "DELETE FROM orders WHERE order_id = ?";
        java.sql.PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, orderID);
        int rows = pst.executeUpdate();
        if(rows > 0){
            JOptionPane.showMessageDialog(this, "Order deleted successfully!");
        }else{
        JOptionPane.showMessageDialog(null, "FAILED to deleted the order");}
        pst.close();
        con.close();
       }catch (SQLException ex){
        JOptionPane.showMessageDialog(this, "SQL Error :" + ex.getMessage());  
        }catch(ClassNotFoundException ex){
        Logger.getLogger(RestuarantManagement.class.getName()).log(Level.SEVERE,null,ex);       }
            
         
        
    }//GEN-LAST:event_btnDeleteOrderActionPerformed

    private void btnClearOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearOrderActionPerformed
        txtOrderId.setText("");
        //txtCustomerId.setText("");
        txtRestaurant.setText("");
        txtAmount.setText("");
        txtStatus.setText("");
        txtQuantity.setText("");
                
                
         
    }//GEN-LAST:event_btnClearOrderActionPerformed

    private void txtAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmountActionPerformed

    private void btnReportRestaurantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportRestaurantsActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Save Restaurants Report");
        chooser.setFileFilter(new FileNameExtensionFilter("PDF Documents", "pdf"));
        chooser.setSelectedFile(new File("restaurants_report_" + java.time.LocalDate.now() + ".pdf"));
        int option = chooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (!file.getName().toLowerCase().endsWith(".pdf")) file = new File(file.getParentFile(), file.getName() + ".pdf");
            // Query the DB for all restaurants and build a table model
            try (Connection con = DBConnection.getConnection();
                 Statement st = con.createStatement();
                 ResultSet rs = st.executeQuery("SELECT name, location, capacity, phone FROM restaurants")) {
                javax.swing.table.DefaultTableModel tm = new javax.swing.table.DefaultTableModel();
                tm.addColumn("Name");
                tm.addColumn("Location");
                tm.addColumn("Capacity");
                tm.addColumn("Phone");
                while (rs.next()) {
                    tm.addRow(new Object[]{rs.getString("name"), rs.getString("location"), rs.getString("capacity"), rs.getString("phone")});
                }
                javax.swing.JTable t = new javax.swing.JTable(tm);
                exportTableToPdf(t, file, "Restaurants Report");
                JOptionPane.showMessageDialog(this, "Report saved to: " + file.getAbsolutePath());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Failed to generate report: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnReportRestaurantsActionPerformed

    private void BtnReportMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnReportMenuActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Save Menu Report");
        chooser.setFileFilter(new FileNameExtensionFilter("PDF Documents", "pdf"));
        chooser.setSelectedFile(new File("menu_report_" + java.time.LocalDate.now() + ".pdf"));
        int option = chooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (!file.getName().toLowerCase().endsWith(".pdf")) file = new File(file.getParentFile(), file.getName() + ".pdf");
            try (Connection con = DBConnection.getConnection();
                 Statement st = con.createStatement();
                 ResultSet rs = st.executeQuery("SELECT restaurant_id, item_name, price, category FROM menu_items")) {
                javax.swing.table.DefaultTableModel tm = new javax.swing.table.DefaultTableModel();
                tm.addColumn("Restaurant ID");
                tm.addColumn("Item");
                tm.addColumn("Price");
                tm.addColumn("Category");
                while (rs.next()) {
                    tm.addRow(new Object[]{rs.getString("restaurant_id"), rs.getString("item_name"), rs.getString("price"), rs.getString("category")});
                }
                javax.swing.JTable t = new javax.swing.JTable(tm);
                exportTableToPdf(t, file, "Menu Report");
                JOptionPane.showMessageDialog(this, "Report saved to: " + file.getAbsolutePath());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Failed to generate report: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_BtnReportMenuActionPerformed

    private void BtnReportOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnReportOrdersActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Save Orders Report");
        chooser.setFileFilter(new FileNameExtensionFilter("PDF Documents", "pdf"));
        chooser.setSelectedFile(new File("orders_report_" + java.time.LocalDate.now() + ".pdf"));
        int option = chooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (!file.getName().toLowerCase().endsWith(".pdf")) file = new File(file.getParentFile(), file.getName() + ".pdf");
            try (Connection con = DBConnection.getConnection();
                 Statement st = con.createStatement();
                 ResultSet rs = st.executeQuery("SELECT order_id, restaurant_id, total_amount, status, quantity FROM orders")) {
                javax.swing.table.DefaultTableModel tm = new javax.swing.table.DefaultTableModel();
                tm.addColumn("Order ID");
                tm.addColumn("Restaurant ID");
                tm.addColumn("Amount");
                tm.addColumn("Status");
                tm.addColumn("Quantity");
                while (rs.next()) {
                    tm.addRow(new Object[]{rs.getString("order_id"), rs.getString("restaurant_id"), rs.getString("total_amount"), rs.getString("status"), rs.getString("quantity")});
                }
                javax.swing.JTable t = new javax.swing.JTable(tm);
                exportTableToPdf(t, file, "Orders Report");
                JOptionPane.showMessageDialog(this, "Report saved to: " + file.getAbsolutePath());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Failed to generate report: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_BtnReportOrdersActionPerformed

    // Inline key/value pdf generator
    private void exportKeyValuePdf(Map<String, String> data, File file, String title) throws IOException {
        try (PDDocument doc = new PDDocument()) {
            PDPage page = new PDPage(PDRectangle.LETTER);
            doc.addPage(page);

            try (PDPageContentStream cs = new PDPageContentStream(doc, page)) {
                cs.beginText();
                cs.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 16);
                cs.newLineAtOffset(50, page.getMediaBox().getHeight() - 50);
                cs.showText(title == null ? "Report" : title);
                cs.endText();

                cs.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 12);
                float y = page.getMediaBox().getHeight() - 80;
                for (Map.Entry<String, String> e : data.entrySet()) {
                    if (y < 60) {
                        cs.close();
                        page = new PDPage(PDRectangle.LETTER);
                        doc.addPage(page);
                        y = page.getMediaBox().getHeight() - 50;
                    }
                    try (PDPageContentStream cs2 = new PDPageContentStream(doc, page, PDPageContentStream.AppendMode.APPEND, true)) {
                        cs2.beginText();
                        cs2.newLineAtOffset(50, y);
                        cs2.showText(e.getKey() + ": " + (e.getValue() == null ? "" : e.getValue()));
                        cs2.endText();
                    }
                    y -= 18;
                }
            }
            doc.save(file);
        }
    }

    // Inline table pdf generator
    private void exportTableToPdf(javax.swing.JTable table, File file, String title) throws IOException {
        try (PDDocument doc = new PDDocument()) {
            PDPage page = new PDPage(PDRectangle.LETTER);
            doc.addPage(page);

            try (PDPageContentStream cs = new PDPageContentStream(doc, page)) {
                cs.beginText();
                cs.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 16);
                cs.newLineAtOffset(50, page.getMediaBox().getHeight() - 50);
                cs.showText(title == null ? "Report" : title);
                cs.endText();

                float y = page.getMediaBox().getHeight() - 80;
                float startX = 50;
                float rowHeight = 14f;
               cs.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 11);
                float x = startX;
                for (int c = 0; c < table.getColumnCount(); c++) {
                    cs.beginText();
                    cs.newLineAtOffset(x, y);
                    cs.showText(table.getColumnName(c));
                    cs.endText();
                    x += 120;
                }
                y -= rowHeight;

               cs.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 10);
                for (int r = 0; r < table.getRowCount(); r++) {
                    if (y < 60) {
                        cs.close();
                        page = new PDPage(PDRectangle.LETTER);
                        doc.addPage(page);
                        y = page.getMediaBox().getHeight() - 50;
                    }
                    x = startX;
                    for (int c = 0; c < table.getColumnCount(); c++) {
                        Object val = table.getValueAt(r, c);
                        String text = val == null ? "" : String.valueOf(val);
                        cs.beginText();
                        cs.newLineAtOffset(x, y);
                        cs.showText(text.length() > 30 ? text.substring(0, 27) + "..." : text);
                        cs.endText();
                        x += 120;
                    }
                    y -= rowHeight;
                }
            }
            doc.save(file);
        }
    }

    /**
     */
    public static void RestuarantMain() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HotelManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HotelManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HotelManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HotelManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new RestuarantManagement().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnReportMenu;
    private javax.swing.JButton BtnReportOrders;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddOrder;
    private javax.swing.JButton btnAddrestaurant;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClearOrder;
    private javax.swing.JButton btnDeleteMenu;
    private javax.swing.JButton btnDeleteOrder;
    private javax.swing.JButton btnDeleteRestaurant;
    private javax.swing.JButton btnExitMenu;
    private javax.swing.JButton btnExitOrder;
    private javax.swing.JButton btnExitRestaurant;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnNextMenu;
    private javax.swing.JButton btnNextOrder;
    private javax.swing.JButton btnNextRestaurant;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnPreviousRestaurant;
    private javax.swing.JButton btnReportRestaurants;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblCapacity;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblItem;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblOrderid;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblQuanity;
    private javax.swing.JLabel lblRestauantName;
    private javax.swing.JLabel lblRestaurant;
    private javax.swing.JLabel lblRestuarantName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtCapacity;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtItem;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtOrderId;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtRestaurant;
    private javax.swing.JTextField txtRestaurantId;
    private javax.swing.JTextField txtRestaurantName;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables
}
