/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package casino.ui;

/**
 *
 * @author PRECIOUS
 * 
 */

import casino.db.DBConnection;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;


public class EmployeeMenu extends javax.swing.JFrame {

    /**
     * Creates new form EmployeeMenu
     */
    public EmployeeMenu() {
        initComponents();
        setTitle("Manage Employees");
      
        LoadEmployeeData();
        setLocationRelativeTo(null);

       
    }
    
    private void LoadEmployeeData(){
        DefaultTableModel model = (DefaultTableModel)TabEmployees.getModel();
        model.setRowCount(0);
        try(Connection con = DBConnection.getConnection();
             Statement stmt = con.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM employees")){
            
            while(rs.next()){
                Object [] row = {
                    rs.getInt("employee_id"),
                    rs.getString("first_name"),
                    rs.getString("last_name"),
                    rs.getString("role_name"),
                    rs.getString("phone"),
                    rs.getString("hire_date"),
                    rs.getString("email"),
                    rs.getDouble("salary") // <-- FIXED: use getDouble, not getString
                };
                model.addRow(row);
            }
            
            
        } catch (SQLException ex) {
             JOptionPane.showMessageDialog(this, "Error loading data: " + ex.getMessage());
        }
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabEmployees = new javax.swing.JTable();
        BtnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        BtnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Gill Sans Ultra Bold", 3, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-customer-30.png"))); // NOI18N
        jLabel1.setText("Employees");

        TabEmployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "EmployeeID", "First name", "Last Name", "Role", "Phone", "Hire date", "email", "Salary"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TabEmployees);
        if (TabEmployees.getColumnModel().getColumnCount() > 0) {
            TabEmployees.getColumnModel().getColumn(0).setResizable(false);
            TabEmployees.getColumnModel().getColumn(1).setResizable(false);
            TabEmployees.getColumnModel().getColumn(2).setResizable(false);
            TabEmployees.getColumnModel().getColumn(3).setResizable(false);
            TabEmployees.getColumnModel().getColumn(4).setResizable(false);
            TabEmployees.getColumnModel().getColumn(5).setResizable(false);
        }

        BtnAdd.setText("‚ûï Add");
        BtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("‚úèÔ∏è Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        BtnDelete.setText("üóë Delete");
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });

        btnRefresh.setText("üîÑ Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-back-48.png"))); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 0, 0));
        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnNext.setText("Next");

        btnPrevious.setText("Previous");

        btnClear.setText("Clear");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(BtnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(27, 27, 27)
                .addComponent(btnNext)
                .addGap(29, 29, 29)
                .addComponent(btnPrevious)
                .addGap(18, 18, 18)
                .addComponent(btnClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(btnBack)
                .addGap(72, 72, 72)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(BtnDelete)
                    .addComponent(btnRefresh)
                    .addComponent(btnNext)
                    .addComponent(btnPrevious)
                    .addComponent(btnClear))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAddActionPerformed
    JTextField firstName = new JTextField();
    JTextField lastName = new JTextField();
    JTextField role = new JTextField();
    JTextField phone = new JTextField();
    JTextField hireDate = new JTextField();
    JTextField email = new JTextField();
    JTextField salary = new JTextField();

    Object[] message = {
        "First Name:", firstName,
        "Last Name:", lastName,
        "Role:", role,
        "Phone:", phone,
        "Hire Date:", hireDate,
        "email:", email,
        "Salary:", salary
    };
    int option = JOptionPane.showConfirmDialog(this, message, "Add Employee", JOptionPane.OK_CANCEL_OPTION);
    if (option == JOptionPane.OK_OPTION) {
        double salaryValue;
        try {
            salaryValue = Double.parseDouble(salary.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Salary must be a number.");
            return;
        }
        try (Connection con = DBConnection.getConnection();
             PreparedStatement ps = con.prepareStatement(
                 "INSERT INTO employees (first_name, last_name, role_name, hire_date, phone, email, salary) VALUES (?, ?, ?, ?, ?, ?, ?)")) {
            ps.setString(1, firstName.getText());
            ps.setString(2, lastName.getText());
            ps.setString(3, role.getText());
            ps.setString(4, phone.getText());
            ps.setString(5, hireDate.getText());
            ps.setString(6, email.getText());
            ps.setDouble(7, salaryValue);
            ps.executeUpdate();
            LoadEmployeeData();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error adding Employee: " + ex.getMessage());
        }
    }
}//GEN-LAST:event_BtnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
    int selectedRow = TabEmployees.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Select an Employee to update.");
        return;
    }
    DefaultTableModel model = (DefaultTableModel) TabEmployees.getModel();
    int EmployeeID = (int) model.getValueAt(selectedRow, 0);
    String currentFirstName = (String) model.getValueAt(selectedRow, 1);
    String currentLastName = (String) model.getValueAt(selectedRow, 2);
    String currentrole = String.valueOf(model.getValueAt(selectedRow, 3));
    String currentphone = (String) model.getValueAt(selectedRow, 4);
    String currenthireDate = (String) model.getValueAt(selectedRow, 5);
    String currentemail = (String) model.getValueAt(selectedRow, 6);
    Double currentsalary = null;
    Object salaryObj = model.getValueAt(selectedRow, 7);
    if (salaryObj instanceof Double aDouble) {
        currentsalary = aDouble;
    } else if (salaryObj != null) {
        try {
            currentsalary = Double.valueOf(salaryObj.toString());
        } catch (NumberFormatException e) {
            currentsalary = 0.0;
        }
    } else {
        currentsalary = 0.0;
    }

    JTextField firstName = new JTextField(currentFirstName);
    JTextField lastName = new JTextField(currentLastName);
    JTextField role = new JTextField(currentrole);
    JTextField phone = new JTextField(currentphone);
    JTextField hireDate = new JTextField(currenthireDate);
    JTextField email = new JTextField(currentemail);
    JTextField salary = new JTextField(String.valueOf(currentsalary));

    Object[] message = {
        "First Name:", firstName,
        "Last Name:", lastName,
        "Role:", role,
        "Phone:", phone,
        "Hire Date:", hireDate,
        "email:", email,
        "Salary", salary
    };
    int option = JOptionPane.showConfirmDialog(this, message, "Update Employees", JOptionPane.OK_CANCEL_OPTION);
    if (option == JOptionPane.OK_OPTION) {
        try (Connection con = DBConnection.getConnection();
             PreparedStatement ps = con.prepareStatement(
                 "UPDATE employees SET first_name=?, last_name=?, role_name=?, phone=?, hire_date = ?, email=?, salary=? WHERE employee_id=?")) {
            ps.setString(1, firstName.getText());
            ps.setString(2, lastName.getText());
            ps.setString(3, role.getText());
            ps.setString(4, phone.getText());
            ps.setString(5, hireDate.getText());
            ps.setString(6, email.getText());
            ps.setString(7, salary.getText());
            
            ps.setInt(8, EmployeeID);
            ps.executeUpdate();
            LoadEmployeeData();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error updating Employee: " + ex.getMessage());
        }
    }
}//GEN-LAST:event_btnUpdateActionPerformed

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
         int selectedRow = TabEmployees.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select an employee to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) TabEmployees.getModel();
        int EmployeeID = (int) model.getValueAt(selectedRow, 0);

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this employee?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection con = DBConnection.getConnection();
                 PreparedStatement ps = con.prepareStatement("DELETE FROM employees WHERE employee_id=?")) {
                ps.setInt(1, EmployeeID);
                ps.executeUpdate();
                LoadEmployeeData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting Employee: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_BtnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        LoadEmployeeData();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        new CasinoDashboard("Admin").setVisible(true);
                    this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     */
    public static void EmployeeMain() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
     
        //</editor-fold>

        /* Create and display the form */
     
        java.awt.EventQueue.invokeLater(() -> {
            new EmployeeMenu().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAdd;
    private javax.swing.JButton BtnDelete;
    private javax.swing.JTable TabEmployees;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}