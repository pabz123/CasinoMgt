/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package casino.ui;

/**
 *
 * @author PRECIOUS
 */
import casino.db.DBConnection;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.IOException;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import org.apache.pdfbox.pdmodel.font.Standard14Fonts;

public class CustomerMenu extends javax.swing.JFrame {
ResultSet rs;
    /**
     * Creates new form CustomerMenu
     */
    public CustomerMenu() {
        initComponents();
        setTitle("Manage Customers");
       
        rs= null;
        setLocationRelativeTo(null);
        loadCustomerData(); // Load data when frame is opened
    }

    // Load data from database into JTable
    private void loadCustomerData() {
        DefaultTableModel model = (DefaultTableModel) TabCustomers.getModel();
        model.setRowCount(0); // Clear existing data

        try (Connection con = DBConnection.getConnection();
             Statement stmt = con.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM customers")) {

            while (rs.next()) {
                Object[] row = {
                    rs.getInt("customer_id"),
                    rs.getString("first_name"),
                    rs.getString("last_name"),
                    rs.getString("phone"),
                    rs.getString("address"),
                    rs.getString("dob"),
                    rs.getString("gender"),
                    rs.getString("email"),
                    rs.getString("national_id"),
                };
                model.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnAddCustomeer = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabCustomers = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnReportCustomers = new javax.swing.JButton();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Gill Sans Ultra Bold", 3, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-customer-30.png"))); // NOI18N
        jLabel1.setText("Customers");

        btnAddCustomeer.setText("➕Add ");
        btnAddCustomeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCustomeerActionPerformed(evt);
            }
        });

        btnUpdate.setText("✏️ Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("🗑 Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnRefresh.setText("🔄Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        TabCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CustomerID", "First name", "Last Name", "Phone", "Address", "date of birth", "gender", "email", "NIN "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TabCustomers);
        if (TabCustomers.getColumnModel().getColumnCount() > 0) {
            TabCustomers.getColumnModel().getColumn(0).setResizable(false);
            TabCustomers.getColumnModel().getColumn(1).setResizable(false);
            TabCustomers.getColumnModel().getColumn(2).setResizable(false);
            TabCustomers.getColumnModel().getColumn(3).setResizable(false);
            TabCustomers.getColumnModel().getColumn(4).setResizable(false);
        }

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-back-48.png"))); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 0, 0));
        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnReportCustomers.setText("Report");
        btnReportCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportCustomersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(btnBack)
                .addGap(79, 79, 79)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit)
                .addGap(55, 55, 55))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddCustomeer)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(27, 27, 27)
                        .addComponent(btnNext)
                        .addGap(35, 35, 35)
                        .addComponent(btnPrevious)
                        .addGap(28, 28, 28)
                        .addComponent(btnClear)
                        .addGap(30, 30, 30)
                        .addComponent(btnDelete)
                        .addGap(27, 27, 27)
                        .addComponent(btnReportCustomers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRefresh))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 805, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCustomeer)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnRefresh)
                    .addComponent(btnNext)
                    .addComponent(btnPrevious)
                    .addComponent(btnClear)
                    .addComponent(btnReportCustomers))
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Add new customer
    private void btnAddCustomeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCustomeerActionPerformed
        JTextField firstName = new JTextField();
        JTextField lastName = new JTextField();
        JTextField phone = new JTextField();
        JTextField address = new JTextField();
        JTextField dob = new JTextField();
        JTextField Sex = new JTextField();
        JTextField email = new JTextField();
        JTextField NIN = new JTextField();
           
        Object[] message = {
            "First Name:", firstName,
            "Last Name:", lastName,
            "Phone:", phone,
            "Address:", address,
            "Date of birth:",dob,
            "Gender:",Sex,
            "email:",email,
            "NIN number",NIN
        };
        int option = JOptionPane.showConfirmDialog(this, message, "Add Customer", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try (Connection con = DBConnection.getConnection();
                 PreparedStatement ps = con.prepareStatement(
                     "INSERT INTO customers (first_name, last_name, phone, address, dob, gender, email, national_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)")) {
                ps.setString(1, firstName.getText());
                ps.setString(2, lastName.getText());
                ps.setString(3, phone.getText());
                ps.setString(4, address.getText());
                ps.setString(5, dob.getText());
                ps.setString(6, Sex.getText());
                ps.setString(7, email.getText());
                ps.setString(8, NIN.getText());
                ps.executeUpdate();
                loadCustomerData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error adding customer: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnAddCustomeerActionPerformed

    // Update selected customer
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = TabCustomers.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select a customer to update.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) TabCustomers.getModel();
        int customerId = (int) model.getValueAt(selectedRow, 0);
        String currentFirstName = (String) model.getValueAt(selectedRow, 1);
        String currentLastName = (String) model.getValueAt(selectedRow, 2);
        String currentPhone = String.valueOf(model.getValueAt(selectedRow, 3));
        String currentAddress = (String) model.getValueAt(selectedRow, 4);
        String currentdob = (String)model.getValueAt(selectedRow, 5);
        String currentsex = (String)model.getValueAt(selectedRow, 6);
        String currentemail = (String)model.getValueAt(selectedRow, 7);
        String currentNIN = (String)model.getValueAt(selectedRow, 8);

        JTextField firstName = new JTextField(currentFirstName);
        JTextField lastName = new JTextField(currentLastName);
        JTextField phone = new JTextField(currentPhone);
        JTextField address = new JTextField(currentAddress);
        JTextField dob = new JTextField(currentdob);
        JTextField Sex = new JTextField(currentsex);
        JTextField email = new JTextField(currentemail);
        JTextField NIN = new JTextField(currentNIN);
        
        Object[] message = {
            "First Name:", firstName,
            "Last Name:", lastName,
            "Phone:", phone,
            "Address:", address,
            "Date of birth:",dob,
            "Gender:",Sex,
            "email:",email,
            "NIN number",NIN
        };
        int option = JOptionPane.showConfirmDialog(this, message, "Update Customer", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try (Connection con = DBConnection.getConnection();
                 PreparedStatement ps = con.prepareStatement(
                     "UPDATE customers SET first_name=?, last_name=?, phone=?, address=?, dob = ?,gender = ?, email=?, national_id=? WHERE customer_id=?")) {
                ps.setString(1, firstName.getText());
                ps.setString(2, lastName.getText());
                ps.setString(3, phone.getText());
                ps.setString(4, address.getText());
                ps.setString(5, dob.getText());
                ps.setString(6, Sex.getText());
                ps.setString(7, email.getText());
                ps.setString(8, NIN.getText());
                ps.setInt(9, customerId);
                ps.executeUpdate();
                loadCustomerData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error updating customer: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    // Delete selected customer
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = TabCustomers.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select a customer to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) TabCustomers.getModel();
        int customerId = (int) model.getValueAt(selectedRow, 0);

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this customer?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection con = DBConnection.getConnection();
                 PreparedStatement ps = con.prepareStatement("DELETE FROM customers WHERE customer_id=?")) {
                ps.setInt(1, customerId);
                ps.executeUpdate();
                loadCustomerData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting customer: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Refresh table data
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadCustomerData();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
          new CasinoDashboard("Admin").setVisible(true);
                    this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        TabCustomers.clearSelection();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        int selectedRow = TabCustomers.getSelectedRow();
        int rowCount = TabCustomers.getRowCount();
        if (selectedRow < rowCount - 1 && selectedRow != -1) {
            TabCustomers.setRowSelectionInterval(selectedRow + 1, selectedRow + 1);
            TabCustomers.scrollRectToVisible(TabCustomers.getCellRect(selectedRow + 1, 0, true));
        } else if (rowCount > 0 && selectedRow == -1) {
            // If nothing is selected, select the first row
            TabCustomers.setRowSelectionInterval(0, 0);
            TabCustomers.scrollRectToVisible(TabCustomers.getCellRect(0, 0, true));
        } else {
            JOptionPane.showMessageDialog(this, "Already at the last customer.");
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        int selectedRow = TabCustomers.getSelectedRow();
        if (selectedRow > 0) {
            TabCustomers.setRowSelectionInterval(selectedRow - 1, selectedRow - 1);
            TabCustomers.scrollRectToVisible(TabCustomers.getCellRect(selectedRow - 1, 0, true));
        } else {
            JOptionPane.showMessageDialog(this, "Already at the first customer.");
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnReportCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportCustomersActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Save Customers Report");
        chooser.setFileFilter(new FileNameExtensionFilter("PDF Documents", "pdf"));
        chooser.setSelectedFile(new File("customers_report_" + java.time.LocalDate.now() + ".pdf"));
        int option = chooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (!file.getName().toLowerCase().endsWith(".pdf")) {
                file = new File(file.getParentFile(), file.getName() + ".pdf");
            }
            try {
                exportTableToPdf(TabCustomers, file, "Customers Report");
                JOptionPane.showMessageDialog(this, "Report saved to: " + file.getAbsolutePath());
            } catch (NoClassDefFoundError | Exception ex) {
                String msg = ex instanceof NoClassDefFoundError ?
                        "PDFBox not found on classpath. Add org.apache.pdfbox:pdfbox to your project." : ex.getMessage();
                JOptionPane.showMessageDialog(this, "Failed to generate report: " + msg);
            }
        }
    }//GEN-LAST:event_btnReportCustomersActionPerformed

    // Inline PDF export helper for table
    private void exportTableToPdf(javax.swing.JTable table, File file, String title) throws IOException {
        try (PDDocument doc = new PDDocument()) {
            PDPage page = new PDPage(PDRectangle.LETTER);
            doc.addPage(page);

            try (PDPageContentStream cs = new PDPageContentStream(doc, page)) {
                cs.beginText();
               cs.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 16);
                cs.newLineAtOffset(50, page.getMediaBox().getHeight() - 50);
                cs.showText(title == null ? "Report" : title);
                cs.endText();

                cs.beginText();
                cs.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 9);
                cs.newLineAtOffset(50, page.getMediaBox().getHeight() - 70);
                cs.showText("Generated: " + java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
                cs.endText();

                float y = page.getMediaBox().getHeight() - 100;
                float startX = 50;
                float rowHeight = 14f;

                // Header
                cs.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 10);
                float x = startX;
                for (int c = 0; c < table.getColumnCount(); c++) {
                    cs.beginText();
                    cs.newLineAtOffset(x, y);
                    cs.showText(table.getColumnName(c));
                    cs.endText();
                    x += 110;
                }
                y -= rowHeight;

                // Rows
                cs.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD), 9);
                for (int r = 0; r < table.getRowCount(); r++) {
                    if (y < 60) {
                        cs.close();
                        page = new PDPage(PDRectangle.LETTER);
                        doc.addPage(page);
                        y = page.getMediaBox().getHeight() - 50;
                    }
                    x = startX;
                    for (int c = 0; c < table.getColumnCount(); c++) {
                        Object val = table.getValueAt(r, c);
                        String text = val == null ? "" : String.valueOf(val);
                        cs.beginText();
                        cs.newLineAtOffset(x, y);
                        cs.showText(text.length() > 30 ? text.substring(0, 27) + "..." : text);
                        cs.endText();
                        x += 110;
                    }
                    y -= rowHeight;
                }
            }
            doc.save(file);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void CustomerMain() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabCustomers;
    private javax.swing.JButton btnAddCustomeer;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnReportCustomers;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
   
}
